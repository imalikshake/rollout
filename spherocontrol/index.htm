<html>

<head>
    <style type="text/css">
div {
        box-sizing: border-box;
    }
    
    .spheroData {
        outline: 1px solid;
        width: 400px;
        position: relative;
        margin-top: 40px;
    }
    
    #spheroData1 {
        float: left;
    }
    
    #spheroData2 {
        float: right;
    }
    
    .container {
        width: 900px;
        padding-left: 0;
        padding-right: 0;
        margin-left: auto;
        margin-right: auto;
        display: block;
        /*outline: green 1px solid;*/
    }
    
    #absoluteCvs {
        padding-left: 0;
        padding-right: 0;
        margin-left: auto;
        margin-right: auto;
        display: block;
    }
    
    .name {
        font-size: 20px;
    }
    
    .driftGraph {
        outline: 1px solid;
    }
}
    </style>
</head>

<body>
    <div class="container">
        <canvas id="absoluteCvs" width="800" height="600" style="border:1px solid #000000;"></canvas>
        <br/> Sphero scale: <span id="spheroScale">1</span>
        <input oninput="spheroScaleChange(this.value)" type="range" min="0" max="5" step="0.001" value="1" style="width: 800px" />
        <br/> Output scale: <span id="outputScale">1</span>
        <input oninput="outputScaleChange(this.value)" type="range" min="0" max="5" step="0.001" value="1" style="width: 800px" />
        <div class="spheroData" id="spheroData1"></div>
        <div class="spheroData" id="spheroData2"></div>
        <!-- <canvas id="spheroAngleCvs" width="200" height="200" style="border:1px solid #000000;"></canvas> -->
        <!-- <canvas id="spheroAngles" width="600" height="100"></canvas> -->
        <!-- <canvas id="kalmanData" width="600" height="200"></canvas> -->
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script type="text/javascript" src="smoothie.js"></script>
    <script>
    var canvas1 = document.getElementById('absoluteCvs');
    var ctx1 = canvas1.getContext('2d');

    function createSpheroLayout(name, id) {
        var container = document.querySelector(id);
        var nameSpan = document.createElement('span');
        nameSpan.className = 'name';
        nameSpan.innerHTML = name;


        var spheroPosTag = document.createElement('div');
        spheroPosTag.innerHTML = 'init';


        var driftGraph = document.createElement('canvas');
        driftGraph.width = "400";
        driftGraph.height = "200";
        driftGraph.className = "driftGraph";

        var smoothie = new SmoothieChart();
        smoothie.streamTo(driftGraph);

        var spheroIPAngle = new TimeSeries();
        var spheroDataAngle = new TimeSeries();
        var spheroDrift = new TimeSeries();

        smoothie.addTimeSeries(spheroIPAngle, {
            strokeStyle: 'rgb(0, 255, 0)',
            lineWidth: 1
        });
        smoothie.addTimeSeries(spheroDataAngle, {
            strokeStyle: 'rgb(255, 0, 0)',
            lineWidth: 1
        });
        smoothie.addTimeSeries(spheroDrift, {
            strokeStyle: 'rgb(0, 191, 255)',
            lineWidth: 1
        });



        container.appendChild(nameSpan);
        container.appendChild(spheroPosTag);
        container.appendChild(driftGraph);

        return {
            spheroIPAngle,
            spheroDataAngle,
            spheroDrift,
            spheroPosTag,
        }
    }

    var booVis = createSpheroLayout('boo', '#spheroData1');
    var ybrVis = createSpheroLayout('ybr', '#spheroData2');

    var vis = {
        boo: booVis,
        ybr: ybrVis
    }

    var state = {};

    var socket = io();
    socket.on('data', function(msg) {
        for (var dtype in msg.data) {
            if (!state[msg.name])
                state[msg.name] = {};
            state[msg.name][dtype] = msg.data[dtype];

            if (dtype === 'spheroAngle') {
                vis[msg.name].spheroDataAngle.append(new Date().getTime(), msg.data[dtype]);
            } else if (dtype === 'ipAngle') {
                vis[msg.name].spheroIPAngle.append(new Date().getTime(), msg.data[dtype]);
            } else if (dtype === 'driftAngle') {
                vis[msg.name].spheroDrift.append(new Date().getTime(), msg.data[dtype]);
            } else if (dtype === 'ipPosTransformed') {
                vis[msg.name].spheroPosTag.innerHTML = 'Last detected visual pos: ' + posToString(msg.data[dtype]);
            } else if (dtype === 'scale') {
                console.log('hue');
            }
        }
    });

    function posToString(pos) {
        return '(' + pos.x.toFixed(2) + ', ' + pos.y.toFixed(2) + ', ' + pos.z.toFixed(2) + ')';
    }

    var center = {
        x: 0,
        y: 0
    };

    var points = [
        center
    ];

    var selected = -1;

    canvas1.addEventListener('mousedown', function(event) {
        var mousePos = getMousePos(canvas1, event);

        for (var i in points) {
            var corner = coordToScreen(points[i]);
            var xdiff = (mousePos.x - corner.x);
            var ydiff = (mousePos.y - corner.y);
            if (xdiff * xdiff + ydiff * ydiff < 100) {
                selected = i;
            }
        }
    });
    canvas1.addEventListener('mousemove', function(event) {
        var mousePos = getMousePos(canvas1, event);
        if (selected !== -1) {
            points[selected] = screenToCoord(mousePos);
            socket.emit('transform', {
                points: points
            });
        }
    });
    canvas1.addEventListener('mouseup', function(event) {
        selected = -1;
    });

    function getMousePos(canvas, evt) {
        var rect = canvas.getBoundingClientRect();
        return {
            x: evt.clientX - rect.left,
            y: evt.clientY - rect.top
        };
    }


    var anglef = 0;

    function circles() {
        anglef += 2 / 20;
        socket.emit('force', {
            force: 0.4,
            direction: anglef
        });
    }
    // setInterval(circles, 1000 / 20);

    function spheroScaleChange(value) {
        var spheroScaleOutput = document.querySelector("#spheroScale");
        spheroScaleOutput.innerHTML = value;

        socket.emit('scale', {
            spheroScale: parseFloat(value)
        });
    }

    function outputScaleChange(value) {
        var outputScale = document.querySelector("#outputScale");
        outputScale.innerHTML = value;

        socket.emit('scale', {
            outputScale: parseFloat(value)
        });
    }


    function drawPolygon(ctx, edges) {
        ctx.beginPath();
        ctx.moveTo(edges[0].x, edges[0].y);
        for (var i = 1; i < edges.length; i++) {
            ctx.lineTo(edges[i].x, edges[i].y);
        }
        ctx.closePath();
        ctx.stroke();
    }

    function drawCircle(pos, r, fill) {
        fill = fill || false;
        ctx1.beginPath();
        ctx1.arc(
            pos.x,
            pos.y,
            r,
            0, 2 * Math.PI
        );
        if (fill)
            ctx1.fill();
        else
            ctx1.stroke();
    }

    function drawLine(ctx, x1, y1, x2, y2, thickness) {
        ctx.lineWidth = thickness || 1;
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
    }

    function draw(dt) {
        ctx1.clearRect(0, 0, canvas1.width, canvas1.height);
        drawIp();
        requestAnimationFrame(draw);
    }
    requestAnimationFrame(draw);


    var height = 600,
        width = 800,
        left = -25,
        right = 25,
        screenTop = -20,
        bottom = 20;

    function coordToScreen(pos) {
        return {
            x: (pos.x - left) / (right - left) * width,
            y: (-pos.y - screenTop) / (bottom - screenTop) * height
        }
    }

    function screenToCoord(pos) {
        return {
            x: pos.x / width * (right - left) + left,
            y: -(pos.y / height * (bottom - screenTop) + screenTop)
        }
    }

    var gameCoords = [{
        x: -12,
        y: -12
    }, {
        x: -12,
        y: 12
    }, {
        x: 12,
        y: 12
    }, {
        x: 12,
        y: -12
    }];

    function drawIp() {
        for (var i in state) {
            var sphero = state[i];

            if (sphero.ipPosTransformed) {
                var pos = coordToScreen(sphero.ipPosTransformed);
                drawCircle(pos, 5);
            }

            if (sphero.kalmanPos) {
                var pos = coordToScreen(sphero.kalmanPos);
                drawCircle(pos, 2, true);
            }

            var cameraBounds = sphero.cameraBounds;
            if (cameraBounds) {
                var bottomLeft = coordToScreen(cameraBounds.bottomLeft);
                var topRight = coordToScreen(cameraBounds.topRight);
                var bottomRight = coordToScreen(cameraBounds.bottomRight);
                var topLeft = coordToScreen(cameraBounds.topLeft);

                drawPolygon(ctx1, [bottomLeft, bottomRight, topRight, topLeft]);
            }
        }
        for (var i in points) {
            var point = points[i];
            drawCircle(coordToScreen(point), 4, true);
        }

        drawPolygon(ctx1, gameCoords.map(coordToScreen));
    }


    var control = {
        force: 0,
        direction: 0
    };
    var angle = 0;

    function circles() {
        angle += 2 * Math.PI / 100;
        socket.emit('force', {
            force: 0.1,
            direction: angle
        })
    }

    var pressedKeys = {
        w: false,
        a: false,
        s: false,
        d: false,
    }
    document.addEventListener('keydown', function(event) {
        if (event.keyCode === 87) {
            pressedKeys.w = true;
        }
        if (event.keyCode === 65) {
            pressedKeys.a = true;
        }
        if (event.keyCode === 83) {
            pressedKeys.s = true;
        }
        if (event.keyCode === 68) {
            pressedKeys.d = true;
        }
        calcNewForce();
    });
    document.addEventListener('keyup', function(event) {
        if (event.keyCode === 87) {
            pressedKeys.w = false;
        }
        if (event.keyCode === 65) {
            pressedKeys.a = false;
        }
        if (event.keyCode === 83) {
            pressedKeys.s = false;
        }
        if (event.keyCode === 68) {
            pressedKeys.d = false;
        }
        calcNewForce();
    });

    function calcNewForce() {
        force = (pressedKeys.w || pressedKeys.a || pressedKeys.s || pressedKeys.d) ? 0.2 : 0.0;
        var x = pressedKeys.w + -pressedKeys.s;
        var y = pressedKeys.d + -pressedKeys.a;
        var direction = Math.atan2(y, x);
        // console.log(direction);
        socket.emit('force', {
            force: force,
            direction: direction
        });
    }
    </script>
</body>

</html>
